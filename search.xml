<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实用的网站总结</title>
      <link href="/2023/02/15/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/15/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00、图片处理"><a href="#0x00、图片处理" class="headerlink" title="0x00、图片处理"></a>0x00、图片处理</h1><h2 id="00-图片压缩"><a href="#00-图片压缩" class="headerlink" title="00 图片压缩"></a>00 图片压缩</h2><h3 id="1、tinypng"><a href="#1、tinypng" class="headerlink" title="1、tinypng"></a>1、<a href="https://tinypng.com/">tinypng</a></h3><p>在工作中少不了对图片的压缩、例如网站上传指定大小的图片，或者是在使用代码管理仓库做图床的时候，大图片不能显示问题等。</p><h1 id="0x01-编程API"><a href="#0x01-编程API" class="headerlink" title="0x01 编程API"></a>0x01 编程API</h1><h2 id="00-api-查询"><a href="#00-api-查询" class="headerlink" title="00 api 查询"></a>00 api 查询</h2><h3 id="1、Rico’s-cheatsheets"><a href="#1、Rico’s-cheatsheets" class="headerlink" title="1、Rico’s cheatsheets"></a>1、<a href="https://devhints.io/">Rico’s cheatsheets</a></h3><p>在网站搜索框中输入你想查询的，就可以看到返回的结果，这个网站主要的语言是英文，这对于英文差的童鞋不是很友好，但是在开发的过程中，你写的代码越多，你越会发现 能熟练读懂英文文章是多磨的重要。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借用Github实现自动更新Gitee Page</title>
      <link href="/2023/02/13/%E5%80%9F%E7%94%A8Github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0Gitee-Page/"/>
      <url>/2023/02/13/%E5%80%9F%E7%94%A8Github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0Gitee-Page/</url>
      
        <content type="html"><![CDATA[<p>最近在使用hexo来写博客，对于hexo的简单使用、在Gitee Page上面也实现了正确的部署，但是发现了一个问题，就是说我在使用<code>hexo d</code> 进行部署的时候，gitee page 没有办法实现自动更新，需要手动进入到项目的gitee page页面点击更新，为了解决这个问题，发现了一个github的仓库代码，是使用action来实现的，下面简单说一下使用这个仓库的过程。</p><p>gitee page action 项目给出了一个使用教程，按照上面的流程可以实现gitee page的自动发布，但是这个文档写的属实有点模糊，可以作为本文章的一个补充。</p><p><a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a></p><h1 id="0x00-总体说明"><a href="#0x00-总体说明" class="headerlink" title="0x00 总体说明"></a>0x00 总体说明</h1><p>这里说一下整体的一个思路，有两种方式。</p><p>第一种，就是在github上面创建一个项目，我们将代码提交到github这个项目上去，然后在action里面配置实现，①将github提交的最新的代码同步到gitee 指定项目上 ②使用action实现对gitee page更新的操作。</p><p>第二种，就是不通过github同步代码到gitee上面，需要同时提交到github和gitee对应的仓库里面，然后使用github的action实现gitee page的自动更新</p><p>我们一上面第一种为例来说明</p><h1 id="0x01-Github-里面操作"><a href="#0x01-Github-里面操作" class="headerlink" title="0x01 Github 里面操作"></a>0x01 Github 里面操作</h1><h2 id="00-在Github中创建一个项目"><a href="#00-在Github中创建一个项目" class="headerlink" title="00 在Github中创建一个项目"></a>00 在Github中创建一个项目</h2><p>需要再github里面创建一个项目。</p><p>我这里已经创建出来了，所以github才会提示说， 这个仓库已经存在了，你们创建的仓库和gitee上面的项目同名就可以。</p><p>这里注意哈，github创建出来的主分支叫做main，而gitee创建出来的主分支叫做master。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131021251.png" alt="image-20230213102115976"></p><h2 id="01-生成秘钥-配置到个人设置以及创建出的项目里"><a href="#01-生成秘钥-配置到个人设置以及创建出的项目里" class="headerlink" title="01 生成秘钥-配置到个人设置以及创建出的项目里"></a>01 生成秘钥-配置到个人设置以及创建出的项目里</h2><h3 id="0、对秘钥的理解"><a href="#0、对秘钥的理解" class="headerlink" title="0、对秘钥的理解"></a>0、对秘钥的理解</h3><p>如果有时间的童鞋可以看一下这里我的文章，大概意思就是说秘钥的一个工作流程，没有的话也不影响使用。</p><p><a href="https://blog.csdn.net/weixin_41288824/article/details/100063009">SSH：ssh两种验证方式（一）</a></p><p><a href="https://blog.csdn.net/weixin_41288824/article/details/88228024">SSH：ssh使用场景（二）</a></p><h3 id="1、生成私钥和公钥"><a href="#1、生成私钥和公钥" class="headerlink" title="1、生成私钥和公钥"></a>1、生成私钥和公钥</h3><p>在命令行中 <code> ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code> ，然后一路回车就可以了，就是使用默认的配置。</p><p>秘钥会存放到家目录的.ssh文件夹下面。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131049717.png" alt="image-20230213104942668"></p><h3 id="2、配置公钥私钥"><a href="#2、配置公钥私钥" class="headerlink" title="2、配置公钥私钥"></a>2、配置公钥私钥</h3><p>在个人的setting里面，找到<code>SSH and GPG keys</code>,  然后点击new SSH key， title的话，随意输入，只要直接能够区分就可以；</p><p>对于下面key，我们要把公钥（id_rsa.pub）里面的内容，拷到key里面，然后点击保存就可以。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131233333.png" alt="image-20230213123307292"></p><p>下一步就是给项目设计变量，我们找到我们刚才在github上面创建的项目，找到项目的setting，然后点击action，在点击右侧的new repository secret。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131236616.png" alt="image-20230213123612577"></p><p>点击之后会出现配置的界面，这里我们定义两个secret， 一个name叫做GITEE_RSA_PRIVATE_KEY， secret就是我们在上面生成的私钥，这里当时遇到一个问题，可以参考下面连接；另外一个叫做GITEE_PASSWORD， secret就是你的gitee的账号密码。</p><p><a href="https://blog.csdn.net/qiuxuezhe_fei/article/details/126027207"># Key is invalid. You must supply a key in OpenSSH public key format</a></p><h3 id="3、在github项目代码添加action文件"><a href="#3、在github项目代码添加action文件" class="headerlink" title="3、在github项目代码添加action文件"></a>3、在github项目代码添加action文件</h3><p>我们使用github的action流程，我们需要添加一个yml文件来作为action的执行文件。我们需要在项目的根目录下，创建一个<code>.github/workfolws</code>的文件夹，里面创建一个sync.yml 的文件，这个文件的名称可以随意。</p><p>这里在网页上面操作一下。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131247147.png" alt="image-20230213124743105"></p><p>只要有这个文件就可以，可以在本地创建，然后上传到github，也是可以的。</p><p>到后面，会执行这个action，执行的过程也会在action 这个tag页里面展示，像是报错之类的信息。</p><h2 id="02-yml文件问题（附加）"><a href="#02-yml文件问题（附加）" class="headerlink" title="02 yml文件问题（附加）"></a>02 yml文件问题（附加）</h2><p>到这里github的配置就差不多，但是这里我遇到一个问题，就是我使用的hexo来部署的，hexo g会把之前的public文件下面的文件都删除，重新生成，这样的话，就会导致上面创建的yml文件丢失，这个问题我也是看了一晚上的issue才看到一个童鞋的解决问题。他的issue是中文的，十分轻松就能看懂的，这里就贴一下连接就可以。</p><p>两篇文章需要一起看，第一个就是说，hexo在部署的时候，如何将额外的文件添加到部署的文件夹里面（就是在source下面创建你想部署的文件）</p><p>第二篇文章说的就是设置一下，让文件正确的出现在根目录下面</p><p><a href="https://github.com/hexojs/hexo-deployer-git/issues/87">When Deploying, Resets My Custom Domain #87</a></p><p><a href="https://github.com/yanglbme/gitee-pages-action/issues/34">使用Hexo设置Gitee自动部署时需要特别配置Hexo，建议写进这边的文档里面 #34</a></p><h1 id="0x03-Gitee-里面项目配置"><a href="#0x03-Gitee-里面项目配置" class="headerlink" title="0x03 Gitee 里面项目配置"></a>0x03 Gitee 里面项目配置</h1><h2 id="00-首次使用gitee-page"><a href="#00-首次使用gitee-page" class="headerlink" title="00 首次使用gitee page"></a>00 首次使用gitee page</h2><p>在gitee相关配置。</p><p>如果说你是第一次使用gitee page的话，就需要自己手动设置一下gitee page，这里就不过多的赘述了， 参考下面链接。</p><p>这里提醒一下，就是现在gitee page需要个人认证了。</p><p><a href="https://blog.csdn.net/qq_46036214/article/details/110137239">在Gitee搭建属于自己的博客</a></p><h2 id="01-配置公钥到个人设置里面"><a href="#01-配置公钥到个人设置里面" class="headerlink" title="01 配置公钥到个人设置里面"></a>01 配置公钥到个人设置里面</h2><p>还是一样的，找到setting，然后左中方找到ssh公钥，标题的话，可以随意，下面的公钥，就填写我们上面生成的id_rsa里面的内容。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302131303137.png" alt="image-20230213130326086"></p><p>到这里我们的自动配置就配置完成了，然后即使测试了</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> github </tag>
            
            <tag> auto-deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee实现CiCd</title>
      <link href="/2023/02/03/Gitee%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%ADCiCd/"/>
      <url>/2023/02/03/Gitee%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%ADCiCd/</url>
      
        <content type="html"><![CDATA[<p>我们的hexo在实现部署之后，就将hexo生成的静态文件已经传到了gitee上面，但是这时候，gitee不会自动重新发布最新的文件，就需要再gitee 的 gitee page里面重新发布。</p><p>这里就是为了实现持续集成持续发布的需求。</p><p>我们找到项目里面的流水线，说的是前200个小时免费，后序收费。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302031739876.png" alt="image-20230203173915623"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速入门</title>
      <link href="/2023/02/03/Hexo%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/03/Hexo%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1、如何管理hexo的目录，就是在hexo里面存放hexo相关的文件。</p><p>2、就是现在gitee不能够及时的相应hexo d，应该需要做cicd<br>3、在obsidian文件目录里面做一个 blog的软连，看这样能不能实现顺畅的工作流。<br>4、就是描述自己的工作流，如何使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Plugin: NerdTree</title>
      <link href="/2023/01/30/Vim-Plugin-NerdTree/"/>
      <url>/2023/01/30/Vim-Plugin-NerdTree/</url>
      
        <content type="html"><![CDATA[<p>NerdTree 是对文件的整体管理</p><p>这里简单描述一下NerdTree的操作</p><h1 id="一、Install"><a href="#一、Install" class="headerlink" title="一、Install"></a>一、Install</h1><p>使用vim-plugin来安装，直接在配置文件里面写入github的地址就可以了。</p><p>这里突然想起，可以直接在vimrc里面编写</p><p>下面是我的nerdtree的配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot; 4.nerdtree</span><br><span class="hljs-string">nnoremap &lt;leader&gt;v :NERDTreeFind&lt;cr&gt;</span><br><span class="hljs-string">nnoremap &lt;leader&gt;g :NERDTreeToggle&lt;cr&gt;</span><br><span class="hljs-string">let NERDTreeShowHidden=1</span><br><span class="hljs-string">let NERDTreeIgnore = [&#x27;\.pyc$&#x27;]  &quot;</span> 过滤所有.pyc文件不显示<br>let g<span class="hljs-punctuation">:</span>NERDTreeDirArrowExpandable = &#x27;+&#x27;<br>let g<span class="hljs-punctuation">:</span>NERDTreeDirArrowCollapsible = &#x27;-&#x27;<br>let NERDTreeShowBookmarks=<span class="hljs-number">1</span>  <span class="hljs-string">&quot; 开启Nerdtree时自动显示Bookmarks</span><br></code></pre></td></tr></table></figure><h1 id="二、Using"><a href="#二、Using" class="headerlink" title="二、Using"></a>二、Using</h1><p>授人以渔，就是我们可以键入 ? 来打开帮助手册。</p><p><img src="https://gitee.com/jet5devil/typora-picture/raw/master/mac_img/202302150952809.png" alt="Snipaste_2023-02-15_09-48-36"></p><h2 id="1、唤醒"><a href="#1、唤醒" class="headerlink" title="1、唤醒"></a>1、唤醒</h2><h2 id="2、NerdTree-帮助手册"><a href="#2、NerdTree-帮助手册" class="headerlink" title="2、NerdTree 帮助手册"></a>2、NerdTree 帮助手册</h2><h3 id="File-node-mappings"><a href="#File-node-mappings" class="headerlink" title="File node mappings"></a>File node mappings</h3><ul><li>t 在新的tab里面打开</li><li>T 打开一个新的空的tab？ </li><li>i 横向分屏打开</li><li>gi</li><li>s 纵向分屏打开</li><li>gs </li><li>&lt;CR&gt; 当前标签页打开</li></ul><h3 id="Directory-node-mappings"><a href="#Directory-node-mappings" class="headerlink" title="Directory node mappings"></a>Directory node mappings</h3><ul><li>o  打开和关闭文件夹，与回车的作用类似</li><li>O 重新刷新打开</li><li>t</li><li>x 关闭父类文件</li><li>X 关闭所有的打开的子类文件夹</li></ul><h3 id="Bookmark-table-mapping"><a href="#Bookmark-table-mapping" class="headerlink" title="Bookmark table mapping"></a>Bookmark table mapping</h3><p>问：如何加入书签？<br>我们将光标移动到你需要加标签的地方，这个时候键入  <code>:Bookmark</code>，这样就将光标所在的文件或者是目录加入到标签里面</p><hr><ul><li>o 打开书签</li><li>go 前一个文件</li><li>D 删除书签</li><li>B 打开和关闭书签显示</li></ul><h3 id="Tree-navigation-mappings"><a href="#Tree-navigation-mappings" class="headerlink" title="Tree navigation mappings"></a>Tree navigation mappings</h3><ul><li>P  跳转根目录</li><li>p 跳转到父目录</li><li>K 跳转到第一个子目录</li><li>J 跳转到最后一个子目录</li></ul><h3 id="Filesystem-mappings"><a href="#Filesystem-mappings" class="headerlink" title="Filesystem mappings"></a>Filesystem mappings</h3><ul><li>C 将光标所在的目录设置蹭root目录</li><li>u 返回到根目录的上一层，折叠</li><li>U 返回到根目录的上一层，不折叠</li><li>r 重新载入当前目录</li><li>R 重新载入根目录</li><li>m 打开菜单，就是操作增删改文件的菜单</li></ul><h3 id="Tree-filtering-mappings"><a href="#Tree-filtering-mappings" class="headerlink" title="Tree filtering mappings"></a>Tree filtering mappings</h3><ul><li>I 隐藏 . 开头的文件或者文件夹</li><li>F 隐藏文件</li><li>B 打开或者关闭书签</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim-plugin </tag>
            
            <tag> nerdtree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2023/01/14/README/"/>
      <url>/2023/01/14/README/</url>
      
        <content type="html"><![CDATA[<p>这里是刚才新建的文件<br>在 front matter里面添加 hide: true， 可以隐藏该篇文章。</p><p>这里简单记录hexo的操作。</p><p>1、新建一个hexo的项目：<code>hexo init project_name</code><br>2、hexo 生成：hexo g<br>3、启动hexo 服务： hexo s<br>4、发布hexo ：hexo d（发布的前提需要安装一个插件）<br>5、新建一篇文章： hexo new title</p><p>参考：<br><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">hexo 0 基础搭建博客</a></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
